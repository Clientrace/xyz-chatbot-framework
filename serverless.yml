
service: ${file(package.json):name}-chatbot-service

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1
  iamRoleStastements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::Join: ['', [Fn::GetAtt: [ chatbotSessionTable, Arn ]] ]

  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    FB_ACCESS_TOKEN: ${self:custom.fb_access_token.${self:provider.stage}}
    chatbot_name: ${self:custom.chatbot_name}
    bot_session_table: ${self:custom.bot_session_table}

custom:
  scripts:
    hooks:
      'deploy:createDeploymentArtifacts' : npm test
      'before:deploy:deploy' : python3 validator.py

  chatbot_name: ${file(package.json):name}
  bot_session_table: ${self:custom.chatbot_name}-session-${self:provider.stage}
  fb_access_token:
    dev: TEST-ACCESS-TOKEN

functions:
  webhook:
    handler: endpoints/facebook.handler
    events:
      - http:
          path: webhook/fb
          method: post
          cors: true

resources:
  Resources:
    chatbotSessionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.bot_session_table}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S

        KeySchema:
          - AttributeName: userid
            KeyType: HASH

        ProvisionThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3

plugins:
  - serverless-plugin-scripts


